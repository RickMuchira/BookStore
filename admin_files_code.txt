=== File: /home/rick110/Downloads/110/BookStore/resources/js/pages/Admin/Categories/Create.tsx ===

import { Head, Link, useForm } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';
import { type BreadcrumbItem } from '@/types';
import { FormEventHandler, useState } from 'react';
import { cn } from '@/lib/utils';
import InputError from '@/components/input-error';

interface Category {
    id: number;
    name: string;
}

interface Props {
    parentCategories: Category[];
}

export default function CategoryCreate({ parentCategories }: Props) {
    const { data, setData, post, processing, errors } = useForm({
        name: '',
        description: '',
        display_order: '0',
        parent_id: '',
        is_promotional: false,
        image: null as File | null,
    });

    const [imageError, setImageError] = useState<string | null>(null);
    const [imagePreview, setImagePreview] = useState<string | null>(null);

    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Categories', href: '/admin/categories' },
        { title: 'Create Category', href: '/admin/categories/create' },
    ];

    const handleSubmit: FormEventHandler = (e) => {
        e.preventDefault();
        post('/admin/categories');
    };

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        setImageError(null);
        
        if (file) {
            // Check file size (10MB limit)
            if (file.size > 10240 * 1024) {
                setImageError('File size must not exceed 10MB');
                e.target.value = '';
                setImagePreview(null);
                return;
            }
            
            // Check file type
            if (!file.type.startsWith('image/')) {
                setImageError('Please upload an image file');
                e.target.value = '';
                setImagePreview(null);
                return;
            }
            
            // Create preview
            const reader = new FileReader();
            reader.onloadend = () => {
                setImagePreview(reader.result as string);
            };
            reader.readAsDataURL(file);
            
            setData('image', file);
        } else {
            setData('image', null);
            setImagePreview(null);
        }
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Create Category" />
            
            <div className="p-6">
                <div className="max-w-2xl mx-auto">
                    <div className="mb-6">
                        <h1 className="text-2xl font-semibold">Create Category</h1>
                        <p className="text-muted-foreground">
                            Add a new category to organize your books
                        </p>
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div className="space-y-2">
                            <Label htmlFor="name">Category Name *</Label>
                            <Input
                                id="name"
                                value={data.name}
                                onChange={(e) => setData('name', e.target.value)}
                                className={cn(errors.name && 'border-destructive')}
                            />
                            <InputError message={errors.name} />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="description">Description</Label>
                            <Textarea
                                id="description"
                                value={data.description}
                                onChange={(e) => setData('description', e.target.value)}
                                rows={3}
                            />
                            <InputError message={errors.description} />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="parent_id">Parent Category</Label>
                            <Select
                                value={data.parent_id || 'none'}
                                onValueChange={(value) => setData('parent_id', value === 'none' ? '' : value)}
                            >
                                <SelectTrigger>
                                    <SelectValue placeholder="Select parent category (optional)" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="none">None</SelectItem>
                                    {parentCategories.map((category) => (
                                        <SelectItem key={category.id} value={category.id.toString()}>
                                            {category.name}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                            <InputError message={errors.parent_id} />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="display_order">Display Order *</Label>
                            <Input
                                id="display_order"
                                type="number"
                                min="0"
                                value={data.display_order}
                                onChange={(e) => setData('display_order', e.target.value)}
                                className={cn(errors.display_order && 'border-destructive')}
                            />
                            <InputError message={errors.display_order} />
                        </div>

                        <div className="flex items-center space-x-2">
                            <Switch
                                id="is_promotional"
                                checked={data.is_promotional}
                                onCheckedChange={(checked) => setData('is_promotional', checked)}
                            />
                            <Label htmlFor="is_promotional">Promotional Category</Label>
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="image">Category Image</Label>
                            {imagePreview && (
                                <div className="mb-2">
                                    <img 
                                        src={imagePreview} 
                                        alt="Category preview"
                                        className="h-32 w-32 object-cover rounded-md"
                                    />
                                </div>
                            )}
                            <Input
                                id="image"
                                type="file"
                                accept="image/*"
                                onChange={handleImageChange}
                            />
                            <InputError message={errors.image || imageError || undefined} />
                            <p className="text-sm text-muted-foreground">
                                Maximum file size: 10MB. Supported formats: JPG, PNG, GIF.
                            </p>
                        </div>

                        <div className="flex justify-end space-x-4">
                            <Link href="/admin/categories">
                                <Button type="button" variant="outline">
                                    Cancel
                                </Button>
                            </Link>
                            <Button type="submit" disabled={processing}>
                                {processing ? 'Creating...' : 'Create Category'}
                            </Button>
                        </div>
                    </form>
                </div>
            </div>
        </AppLayout>
    );
}
=====================================

=== File: /home/rick110/Downloads/110/BookStore/resources/js/pages/Admin/Categories/Edit.tsx ===

import { Head, Link, useForm, router } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';
import { type BreadcrumbItem } from '@/types';
import { FormEventHandler, useState } from 'react';
import InputError from '@/components/input-error';
import { cn } from '@/lib/utils';

interface Category {
    id: number;
    name: string;
    description: string | null;
    display_order: number;
    parent_id: number | null;
    is_promotional: boolean;
    image_path: string | null;
}

interface Props {
    category: Category;
    parentCategories: Category[];
}

export default function CategoryEdit({ category, parentCategories }: Props) {
    const { data, setData, post, processing, errors } = useForm({
        name: category.name,
        description: category.description || '',
        display_order: category.display_order.toString(),
        parent_id: category.parent_id?.toString() || 'none',
        is_promotional: category.is_promotional,
        image: null as File | null,
        _method: 'PUT',
    });

    const [imageError, setImageError] = useState<string | null>(null);
    const [imagePreview, setImagePreview] = useState<string | null>(null);

    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Categories', href: '/admin/categories' },
        { title: 'Edit Category', href: `/admin/categories/${category.id}/edit` },
    ];

    const handleSubmit: FormEventHandler = (e) => {
        e.preventDefault();
        post(`/admin/categories/${category.id}`);
    };

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        setImageError(null);
        
        if (file) {
            // Check file size (10MB limit)
            if (file.size > 10240 * 1024) {
                setImageError('File size must not exceed 10MB');
                e.target.value = '';
                setImagePreview(null);
                return;
            }
            
            // Check file type
            if (!file.type.startsWith('image/')) {
                setImageError('Please upload an image file');
                e.target.value = '';
                setImagePreview(null);
                return;
            }
            
            // Create preview
            const reader = new FileReader();
            reader.onloadend = () => {
                setImagePreview(reader.result as string);
            };
            reader.readAsDataURL(file);
            
            setData('image', file);
        } else {
            setData('image', null);
            setImagePreview(null);
        }
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Edit Category" />
            
            <div className="p-6">
                <div className="max-w-2xl mx-auto">
                    <div className="mb-6">
                        <h1 className="text-2xl font-semibold">Edit Category</h1>
                        <p className="text-muted-foreground">
                            Update category information
                        </p>
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div className="space-y-2">
                            <Label htmlFor="name">Category Name *</Label>
                            <Input
                                id="name"
                                value={data.name}
                                onChange={(e) => setData('name', e.target.value)}
                                className={cn(errors.name && 'border-destructive')}
                            />
                            <InputError message={errors.name} />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="description">Description</Label>
                            <Textarea
                                id="description"
                                value={data.description}
                                onChange={(e) => setData('description', e.target.value)}
                                rows={3}
                            />
                            <InputError message={errors.description} />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="parent_id">Parent Category</Label>
                            <Select
                                value={data.parent_id}
                                onValueChange={(value) => setData('parent_id', value)}
                            >
                                <SelectTrigger>
                                    <SelectValue placeholder="Select parent category (optional)" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="none">None</SelectItem>
                                    {parentCategories.map((parentCategory) => (
                                        <SelectItem 
                                            key={parentCategory.id} 
                                            value={parentCategory.id.toString()}
                                        >
                                            {parentCategory.name}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                            <InputError message={errors.parent_id} />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="display_order">Display Order *</Label>
                            <Input
                                id="display_order"
                                type="number"
                                min="0"
                                value={data.display_order}
                                onChange={(e) => setData('display_order', e.target.value)}
                                className={cn(errors.display_order && 'border-destructive')}
                            />
                            <InputError message={errors.display_order} />
                        </div>

                        <div className="flex items-center space-x-2">
                            <Switch
                                id="is_promotional"
                                checked={data.is_promotional}
                                onCheckedChange={(checked) => setData('is_promotional', checked)}
                            />
                            <Label htmlFor="is_promotional">Promotional Category</Label>
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="image">Category Image</Label>
                            {(category.image_path || imagePreview) && (
                                <div className="mb-2">
                                    <img 
                                        src={imagePreview || `/storage/${category.image_path}`} 
                                        alt={category.name}
                                        className="h-32 w-32 object-cover rounded-md"
                                    />
                                </div>
                            )}
                            <Input
                                id="image"
                                type="file"
                                accept="image/*"
                                onChange={handleImageChange}
                            />
                            <InputError message={errors.image || imageError || undefined} />
                            <p className="text-sm text-muted-foreground">
                                Maximum file size: 10MB. Supported formats: JPG, PNG, GIF.
                            </p>
                        </div>

                        <div className="flex justify-end space-x-4">
                            <Link href="/admin/categories">
                                <Button type="button" variant="outline">
                                    Cancel
                                </Button>
                            </Link>
                            <Button type="submit" disabled={processing}>
                                {processing ? 'Updating...' : 'Update Category'}
                            </Button>
                        </div>
                    </form>
                </div>
            </div>
        </AppLayout>
    );
}
=====================================

=== File: /home/rick110/Downloads/110/BookStore/resources/js/pages/Admin/Categories/Index.tsx ===

// resources/js/pages/Admin/Categories/Index.tsx
import { Head, Link, router } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { MoreHorizontal, Pencil, Trash, Plus } from 'lucide-react';
import { type BreadcrumbItem } from '@/types';

interface Category {
    id: number;
    name: string;
    description: string | null;
    display_order: number;
    is_promotional: boolean;
    parent_id: number | null;
    parent?: {
        id: number;
        name: string;
    };
}

interface Props {
    categories: Category[];
}

export default function CategoryIndex({ categories }: Props) {
    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Categories', href: '/admin/categories' },
    ];

    const handleDelete = (category: Category) => {
        if (confirm(`Are you sure you want to delete "${category.name}"?`)) {
            router.delete(`/admin/categories/${category.id}`);
        }
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Categories" />
            
            <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                    <div>
                        <h1 className="text-2xl font-semibold">Categories</h1>
                        <p className="text-muted-foreground">
                            Manage your book categories and subcategories
                        </p>
                    </div>
                    <Link href="/admin/categories/create">
                        <Button>
                            <Plus className="mr-2 h-4 w-4" />
                            Add Category
                        </Button>
                    </Link>
                </div>

                <div className="rounded-md border">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Name</TableHead>
                                <TableHead>Parent Category</TableHead>
                                <TableHead>Type</TableHead>
                                <TableHead>Display Order</TableHead>
                                <TableHead className="w-[70px]"></TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {categories.length === 0 ? (
                                <TableRow>
                                    <TableCell colSpan={5} className="text-center">
                                        No categories found. Create your first category.
                                    </TableCell>
                                </TableRow>
                            ) : (
                                categories.map((category) => (
                                    <TableRow key={category.id}>
                                        <TableCell className="font-medium">
                                            {category.name}
                                        </TableCell>
                                        <TableCell>
                                            {category.parent ? category.parent.name : '—'}
                                        </TableCell>
                                        <TableCell>
                                            {category.is_promotional ? (
                                                <Badge variant="secondary">Promotional</Badge>
                                            ) : (
                                                <Badge variant="outline">Regular</Badge>
                                            )}
                                        </TableCell>
                                        <TableCell>{category.display_order}</TableCell>
                                        <TableCell>
                                            <DropdownMenu>
                                                <DropdownMenuTrigger asChild>
                                                    <Button variant="ghost" size="icon">
                                                        <MoreHorizontal className="h-4 w-4" />
                                                    </Button>
                                                </DropdownMenuTrigger>
                                                <DropdownMenuContent align="end">
                                                    <DropdownMenuItem asChild>
                                                        <Link href={`/admin/categories/${category.id}/edit`}>
                                                            <Pencil className="mr-2 h-4 w-4" />
                                                            Edit
                                                        </Link>
                                                    </DropdownMenuItem>
                                                    <DropdownMenuItem
                                                        className="text-destructive"
                                                        onClick={() => handleDelete(category)}
                                                    >
                                                        <Trash className="mr-2 h-4 w-4" />
                                                        Delete
                                                    </DropdownMenuItem>
                                                </DropdownMenuContent>
                                            </DropdownMenu>
                                        </TableCell>
                                    </TableRow>
                                ))
                            )}
                        </TableBody>
                    </Table>
                </div>
            </div>
        </AppLayout>
    );
}
=====================================

=== File: /home/rick110/Downloads/110/BookStore/resources/js/pages/Admin/Products/Create.tsx ===

// resources/js/pages/Admin/Products/Create.tsx
import { Head, Link, useForm } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';
import { type BreadcrumbItem } from '@/types';
import { FormEventHandler } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface Category {
    id: number;
    name: string;
    parent_id: number | null;
    parent?: { name: string };
}

interface Props {
    categories: Category[];
}

export default function ProductCreate({ categories }: Props) {
    const { data, setData, post, processing, errors } = useForm({
        title: '',
        description: '',
        status: 'draft',
        regular_price: '',
        compare_at_price: '',
        cost_per_item: '',
        stock_quantity: '',
        sku: '',
        categories: [] as string[],
        images: [] as File[],
    });

    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Products', href: '/admin/products' },
        { title: 'Create Product', href: '/admin/products/create' },
    ];

    const handleSubmit: FormEventHandler = (e) => {
        e.preventDefault();
        
        // Create FormData object
        const formData = new FormData();
        
        // Add all fields to FormData
        formData.append('title', data.title);
        formData.append('description', data.description || '');
        formData.append('status', data.status);
        formData.append('regular_price', data.regular_price);
        formData.append('compare_at_price', data.compare_at_price || '');
        formData.append('cost_per_item', data.cost_per_item || '');
        formData.append('stock_quantity', data.stock_quantity);
        formData.append('sku', data.sku || '');
        
        // Add categories
        data.categories.forEach((categoryId) => {
            formData.append('categories[]', categoryId);
        });
        
        // Add images
        if (data.images.length > 0) {
            data.images.forEach((image, index) => {
                formData.append(`images[${index}]`, image);
            });
        }
        
        // Submit using Inertia's post method
        post('/admin/products', {
            data: formData,
            forceFormData: true,
            preserveScroll: true,
            onError: (errors) => {
                console.error('Form errors:', errors);
            },
            onSuccess: (page) => {
                console.log('Success:', page);
            },
        });
    };

    const handleCategoryChange = (categoryId: string, checked: boolean) => {
        if (checked) {
            setData('categories', [...data.categories, categoryId]);
        } else {
            setData('categories', data.categories.filter(id => id !== categoryId));
        }
    };

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files) {
            setData('images', Array.from(e.target.files));
        }
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Create Product" />
            
            <div className="p-6">
                <div className="max-w-4xl mx-auto">
                    <div className="mb-6">
                        <h1 className="text-2xl font-semibold">Create Product</h1>
                        <p className="text-muted-foreground">
                            Add a new book to your inventory
                        </p>
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <Card className="md:col-span-2">
                                <CardHeader>
                                    <CardTitle>Basic Information</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="title">Title *</Label>
                                        <Input
                                            id="title"
                                            value={data.title}
                                            onChange={(e) => setData('title', e.target.value)}
                                            className={cn(errors.title && 'border-destructive')}
                                        />
                                        {errors.title && (
                                            <p className="text-sm text-destructive">{errors.title}</p>
                                        )}
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="description">Description</Label>
                                        <Textarea
                                            id="description"
                                            value={data.description}
                                            onChange={(e) => setData('description', e.target.value)}
                                            rows={4}
                                        />
                                        {errors.description && (
                                            <p className="text-sm text-destructive">{errors.description}</p>
                                        )}
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="status">Status *</Label>
                                        <Select
                                            value={data.status}
                                            onValueChange={(value) => setData('status', value)}
                                        >
                                            <SelectTrigger>
                                                <SelectValue placeholder="Select status" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="draft">Draft</SelectItem>
                                                <SelectItem value="active">Active</SelectItem>
                                            </SelectContent>
                                        </Select>
                                        {errors.status && (
                                            <p className="text-sm text-destructive">{errors.status}</p>
                                        )}
                                    </div>
                                </CardContent>
                            </Card>

                            <Card>
                                <CardHeader>
                                    <CardTitle>Pricing</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="regular_price">Regular Price (KES) *</Label>
                                        <Input
                                            id="regular_price"
                                            type="number"
                                            min="0"
                                            step="0.01"
                                            value={data.regular_price}
                                            onChange={(e) => setData('regular_price', e.target.value)}
                                            className={cn(errors.regular_price && 'border-destructive')}
                                        />
                                        {errors.regular_price && (
                                            <p className="text-sm text-destructive">{errors.regular_price}</p>
                                        )}
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="compare_at_price">Compare-at Price (KES)</Label>
                                        <Input
                                            id="compare_at_price"
                                            type="number"
                                            min="0"
                                            step="0.01"
                                            value={data.compare_at_price}
                                            onChange={(e) => setData('compare_at_price', e.target.value)}
                                            className={cn(errors.compare_at_price && 'border-destructive')}
                                        />
                                        {errors.compare_at_price && (
                                            <p className="text-sm text-destructive">{errors.compare_at_price}</p>
                                        )}
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="cost_per_item">Cost per Item (KES)</Label>
                                        <Input
                                            id="cost_per_item"
                                            type="number"
                                            min="0"
                                            step="0.01"
                                            value={data.cost_per_item}
                                            onChange={(e) => setData('cost_per_item', e.target.value)}
                                            className={cn(errors.cost_per_item && 'border-destructive')}
                                        />
                                        {errors.cost_per_item && (
                                            <p className="text-sm text-destructive">{errors.cost_per_item}</p>
                                        )}
                                    </div>
                                </CardContent>
                            </Card>

                            <Card>
                                <CardHeader>
                                    <CardTitle>Inventory</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="stock_quantity">Stock Quantity *</Label>
                                        <Input
                                            id="stock_quantity"
                                            type="number"
                                            min="0"
                                            value={data.stock_quantity}
                                            onChange={(e) => setData('stock_quantity', e.target.value)}
                                            className={cn(errors.stock_quantity && 'border-destructive')}
                                        />
                                        {errors.stock_quantity && (
                                            <p className="text-sm text-destructive">{errors.stock_quantity}</p>
                                        )}
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="sku">SKU/ISBN</Label>
                                        <Input
                                            id="sku"
                                            value={data.sku}
                                            onChange={(e) => setData('sku', e.target.value)}
                                            className={cn(errors.sku && 'border-destructive')}
                                        />
                                        {errors.sku && (
                                            <p className="text-sm text-destructive">{errors.sku}</p>
                                        )}
                                    </div>
                                </CardContent>
                            </Card>

                            <Card className="md:col-span-2">
                                <CardHeader>
                                    <CardTitle>Categories *</CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        {categories.map((category) => (
                                            <div key={category.id} className="flex items-center space-x-2">
                                                <Checkbox
                                                    id={`category-${category.id}`}
                                                    checked={data.categories.includes(category.id.toString())}
                                                    onCheckedChange={(checked) => 
                                                        handleCategoryChange(category.id.toString(), checked as boolean)
                                                    }
                                                />
                                                <Label htmlFor={`category-${category.id}`}>
                                                    {category.parent ? `${category.parent.name} > ` : ''}
                                                    {category.name}
                                                </Label>
                                            </div>
                                        ))}
                                    </div>
                                    {errors.categories && (
                                        <p className="text-sm text-destructive mt-2">{errors.categories}</p>
                                    )}
                                </CardContent>
                            </Card>

                            <Card className="md:col-span-2">
                                <CardHeader>
                                    <CardTitle>Images</CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div className="space-y-2">
                                        <Label htmlFor="images">Product Images</Label>
                                        <Input
                                            id="images"
                                            type="file"
                                            multiple
                                            accept="image/*"
                                            onChange={handleImageChange}
                                        />
                                        <p className="text-sm text-muted-foreground">
                                            The first image will be used as the primary image
                                        </p>
                                        {errors.images && (
                                            <p className="text-sm text-destructive">{errors.images}</p>
                                        )}
                                    </div>
                                </CardContent>
                            </Card>
                        </div>

                        <div className="flex justify-end space-x-4">
                            <Link href="/admin/products">
                                <Button type="button" variant="outline">
                                    Cancel
                                </Button>
                            </Link>
                            <Button type="submit" disabled={processing}>
                                {processing ? 'Creating...' : 'Create Product'}
                            </Button>
                        </div>
                    </form>
                </div>
            </div>
        </AppLayout>
    );
}
=====================================

=== File: /home/rick110/Downloads/110/BookStore/resources/js/pages/Admin/Products/Edit.tsx ===

// resources/js/pages/Admin/Products/Edit.tsx
import { Head, Link, useForm, router } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';
import { type BreadcrumbItem } from '@/types';
import { FormEventHandler } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { X, Star } from 'lucide-react';
import InputError from '@/components/input-error';

interface ProductImage {
    id: number;
    image_path: string;
    is_primary: boolean;
    display_order: number;
}

interface Category {
    id: number;
    name: string;
    parent_id: number | null;
    parent?: { name: string };
}

interface Product {
    id: number;
    title: string;
    description: string | null;
    status: 'active' | 'draft';
    regular_price: number;
    compare_at_price: number | null;
    cost_per_item: number | null;
    stock_quantity: number;
    sku: string | null;
    images: ProductImage[];
}

interface Props {
    product: Product;
    categories: Category[];
    selectedCategories: number[];
}

export default function ProductEdit({ product, categories, selectedCategories }: Props) {
    const { data, setData, post, processing, errors } = useForm({
        title: product.title,
        description: product.description || '',
        status: product.status,
        regular_price: product.regular_price.toString(),
        compare_at_price: product.compare_at_price?.toString() || '',
        cost_per_item: product.cost_per_item?.toString() || '',
        stock_quantity: product.stock_quantity.toString(),
        sku: product.sku || '',
        categories: selectedCategories.map(String),
        _method: 'PUT',
    });

    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Products', href: '/admin/products' },
        { title: 'Edit Product', href: `/admin/products/${product.id}/edit` },
    ];

    const handleSubmit: FormEventHandler = (e) => {
        e.preventDefault();
        post(`/admin/products/${product.id}`);
    };

    const handleCategoryChange = (categoryId: string, checked: boolean) => {
        if (checked) {
            setData('categories', [...data.categories, categoryId]);
        } else {
            setData('categories', data.categories.filter(id => id !== categoryId));
        }
    };

    const handleImageDelete = (imageId: number) => {
        if (confirm('Are you sure you want to delete this image?')) {
            router.delete(`/admin/products/${product.id}/images/${imageId}`);
        }
    };

    const handleSetPrimaryImage = (imageId: number) => {
        router.post(`/admin/products/${product.id}/images/${imageId}/primary`);
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Edit Product" />
            
            <div className="p-6">
                <div className="max-w-4xl mx-auto">
                    <div className="mb-6">
                        <h1 className="text-2xl font-semibold">Edit Product</h1>
                        <p className="text-muted-foreground">
                            Update product information
                        </p>
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <Card className="md:col-span-2">
                                <CardHeader>
                                    <CardTitle>Basic Information</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="title">Title *</Label>
                                        <Input
                                            id="title"
                                            value={data.title}
                                            onChange={(e) => setData('title', e.target.value)}
                                        />
                                        <InputError message={errors.title} />
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="description">Description</Label>
                                        <Textarea
                                            id="description"
                                            value={data.description}
                                            onChange={(e) => setData('description', e.target.value)}
                                            rows={4}
                                        />
                                        <InputError message={errors.description} />
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="status">Status *</Label>
                                        <Select
                                            value={data.status}
                                            onValueChange={(value) => setData('status', value as 'active' | 'draft')}
                                        >
                                            <SelectTrigger>
                                                <SelectValue placeholder="Select status" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="draft">Draft</SelectItem>
                                                <SelectItem value="active">Active</SelectItem>
                                            </SelectContent>
                                        </Select>
                                        <InputError message={errors.status} />
                                    </div>
                                </CardContent>
                            </Card>

                            <Card>
                                <CardHeader>
                                    <CardTitle>Pricing</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="regular_price">Regular Price (KES) *</Label>
                                        <Input
                                            id="regular_price"
                                            type="number"
                                            min="0"
                                            step="0.01"
                                            value={data.regular_price}
                                            onChange={(e) => setData('regular_price', e.target.value)}
                                        />
                                        <InputError message={errors.regular_price} />
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="compare_at_price">Compare-at Price (KES)</Label>
                                        <Input
                                            id="compare_at_price"
                                            type="number"
                                            min="0"
                                            step="0.01"
                                            value={data.compare_at_price}
                                            onChange={(e) => setData('compare_at_price', e.target.value)}
                                        />
                                        <InputError message={errors.compare_at_price} />
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="cost_per_item">Cost per Item (KES)</Label>
                                        <Input
                                            id="cost_per_item"
                                            type="number"
                                            min="0"
                                            step="0.01"
                                            value={data.cost_per_item}
                                            onChange={(e) => setData('cost_per_item', e.target.value)}
                                        />
                                        <InputError message={errors.cost_per_item} />
                                    </div>
                                </CardContent>
                            </Card>

                            <Card>
                                <CardHeader>
                                    <CardTitle>Inventory</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="stock_quantity">Stock Quantity *</Label>
                                        <Input
                                            id="stock_quantity"
                                            type="number"
                                            min="0"
                                            value={data.stock_quantity}
                                            onChange={(e) => setData('stock_quantity', e.target.value)}
                                        />
                                        <InputError message={errors.stock_quantity} />
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="sku">SKU/ISBN</Label>
                                        <Input
                                            id="sku"
                                            value={data.sku}
                                            onChange={(e) => setData('sku', e.target.value)}
                                        />
                                        <InputError message={errors.sku} />
                                    </div>
                                </CardContent>
                            </Card>

                            <Card className="md:col-span-2">
                                <CardHeader>
                                    <CardTitle>Categories *</CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        {categories.map((category) => (
                                            <div key={category.id} className="flex items-center space-x-2">
                                                <Checkbox
                                                    id={`category-${category.id}`}
                                                    checked={data.categories.includes(category.id.toString())}
                                                    onCheckedChange={(checked) => 
                                                        handleCategoryChange(category.id.toString(), checked as boolean)
                                                    }
                                                />
                                                <Label htmlFor={`category-${category.id}`}>
                                                    {category.parent ? `${category.parent.name} > ` : ''}
                                                    {category.name}
                                                </Label>
                                            </div>
                                        ))}
                                    </div>
                                    <InputError message={errors.categories} className="mt-2" />
                                </CardContent>
                            </Card>

                            <Card className="md:col-span-2">
                                <CardHeader>
                                    <CardTitle>Images</CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div className="space-y-4">
                                        {product.images.length > 0 ? (
                                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                                {product.images.map((image) => (
                                                    <div key={image.id} className="relative group">
                                                        <img
                                                            src={`/storage/${image.image_path}`}
                                                            alt="Product"
                                                            className="w-full h-40 object-cover rounded-lg"
                                                        />
                                                        <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center gap-2">
                                                            <Button
                                                                type="button"
                                                                variant="secondary"
                                                                size="sm"
                                                                onClick={() => handleSetPrimaryImage(image.id)}
                                                                disabled={image.is_primary}
                                                            >
                                                                <Star className={`h-4 w-4 ${image.is_primary ? 'fill-current' : ''}`} />
                                                            </Button>
                                                            <Button
                                                                type="button"
                                                                variant="destructive"
                                                                size="sm"
                                                                onClick={() => handleImageDelete(image.id)}
                                                            >
                                                                <X className="h-4 w-4" />
                                                            </Button>
                                                        </div>
                                                        {image.is_primary && (
                                                            <div className="absolute top-2 left-2 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs">
                                                                Primary
                                                            </div>
                                                        )}
                                                    </div>
                                                ))}
                                            </div>
                                        ) : (
                                            <p className="text-muted-foreground">No images uploaded</p>
                                        )}
                                        
                                        <div className="border-t pt-4">
                                            <Label htmlFor="new-images">Add More Images</Label>
                                            <form
                                                onSubmit={(e) => {
                                                    e.preventDefault();
                                                    const formData = new FormData(e.currentTarget);
                                                    router.post(`/admin/products/${product.id}/images`, formData);
                                                    e.currentTarget.reset();
                                                }}
                                                className="flex gap-4 items-end"
                                            >
                                                <div className="flex-1">
                                                    <Input
                                                        id="new-images"
                                                        name="images[]"
                                                        type="file"
                                                        multiple
                                                        accept="image/*"
                                                    />
                                                </div>
                                                <Button type="submit">Upload</Button>
                                            </form>
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                        </div>

                        <div className="flex justify-end space-x-4">
                            <Link href="/admin/products">
                                <Button type="button" variant="outline">
                                    Cancel
                                </Button>
                            </Link>
                            <Button type="submit" disabled={processing}>
                                {processing ? 'Updating...' : 'Update Product'}
                            </Button>
                        </div>
                    </form>
                </div>
            </div>
        </AppLayout>
    );
}
=====================================

=== File: /home/rick110/Downloads/110/BookStore/resources/js/pages/Admin/Products/Show.tsx ===

// resources/js/pages/Admin/Products/Show.tsx
import { Head, Link } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { type BreadcrumbItem } from '@/types';
import { Pencil } from 'lucide-react';

interface ProductImage {
    id: number;
    image_path: string;
    is_primary: boolean;
    display_order: number;
}

interface Category {
    id: number;
    name: string;
}

interface Product {
    id: number;
    title: string;
    description: string | null;
    status: 'active' | 'draft';
    regular_price: number;
    compare_at_price: number | null;
    cost_per_item: number | null;
    stock_quantity: number;
    sku: string | null;
    images: ProductImage[];
    categories: Category[];
}

interface Props {
    product: Product;
}

export default function ProductShow({ product }: Props) {
    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Products', href: '/admin/products' },
        { title: product.title, href: `/admin/products/${product.id}` },
    ];

    const formatPrice = (price: number) => {
        return new Intl.NumberFormat('en-KE', {
            style: 'currency',
            currency: 'KES',
        }).format(price);
    };

    const calculateProfit = () => {
        if (product.cost_per_item) {
            return product.regular_price - product.cost_per_item;
        }
        return null;
    };

    const calculateMargin = () => {
        const profit = calculateProfit();
        if (profit && product.regular_price > 0) {
            return ((profit / product.regular_price) * 100).toFixed(1);
        }
        return null;
    };

    const primaryImage = product.images.find(img => img.is_primary);

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title={product.title} />
            
            <div className="p-6">
                <div className="max-w-6xl mx-auto">
                    <div className="flex items-center justify-between mb-6">
                        <div>
                            <h1 className="text-2xl font-semibold">{product.title}</h1>
                            <p className="text-muted-foreground">
                                Product Details
                            </p>
                        </div>
                        <Link href={`/admin/products/${product.id}/edit`}>
                            <Button>
                                <Pencil className="mr-2 h-4 w-4" />
                                Edit Product
                            </Button>
                        </Link>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <Card className="md:col-span-2">
                            <CardHeader>
                                <CardTitle>Product Information</CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <div>
                                    <h3 className="font-medium mb-1">Title</h3>
                                    <p>{product.title}</p>
                                </div>
                                
                                <div>
                                    <h3 className="font-medium mb-1">Description</h3>
                                    <p className="whitespace-pre-wrap">{product.description || 'No description provided'}</p>
                                </div>
                                
                                <div>
                                    <h3 className="font-medium mb-1">Status</h3>
                                    <Badge variant={product.status === 'active' ? "default" : "secondary"}>
                                        {product.status}
                                    </Badge>
                                </div>
                                
                                <div>
                                    <h3 className="font-medium mb-1">Categories</h3>
                                    <div className="flex flex-wrap gap-2">
                                        {product.categories.map((category) => (
                                            <Badge key={category.id} variant="secondary">
                                                {category.name}
                                            </Badge>
                                        ))}
                                    </div>
                                </div>
                                
                                <div>
                                    <h3 className="font-medium mb-1">SKU/ISBN</h3>
                                    <p>{product.sku || '—'}</p>
                                </div>
                            </CardContent>
                        </Card>

                        <div className="space-y-6">
                            <Card>
                                <CardHeader>
                                    <CardTitle>Pricing</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div>
                                        <h3 className="font-medium mb-1">Regular Price</h3>
                                        <p className="text-lg font-semibold">{formatPrice(product.regular_price)}</p>
                                    </div>
                                    
                                    {product.compare_at_price && (
                                        <div>
                                            <h3 className="font-medium mb-1">Compare-at Price</h3>
                                            <p className="text-lg line-through text-muted-foreground">
                                                {formatPrice(product.compare_at_price)}
                                            </p>
                                        </div>
                                    )}
                                    
                                    {product.cost_per_item && (
                                        <>
                                            <div>
                                                <h3 className="font-medium mb-1">Cost per Item</h3>
                                                <p>{formatPrice(product.cost_per_item)}</p>
                                            </div>
                                            
                                            <div>
                                                <h3 className="font-medium mb-1">Profit</h3>
                                                <p>{formatPrice(calculateProfit() || 0)}</p>
                                            </div>
                                            
                                            <div>
                                                <h3 className="font-medium mb-1">Margin</h3>
                                                <p>{calculateMargin()}%</p>
                                            </div>
                                        </>
                                    )}
                                </CardContent>
                            </Card>

                            <Card>
                                <CardHeader>
                                    <CardTitle>Inventory</CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div>
                                        <h3 className="font-medium mb-1">Stock Quantity</h3>
                                        <Badge variant={product.stock_quantity > 0 ? "default" : "destructive"}>
                                            {product.stock_quantity} in stock
                                        </Badge>
                                    </div>
                                </CardContent>
                            </Card>
                        </div>

                        <Card className="md:col-span-3">
                            <CardHeader>
                                <CardTitle>Images</CardTitle>
                            </CardHeader>
                            <CardContent>
                                {product.images.length > 0 ? (
                                    <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                                        {product.images.map((image) => (
                                            <div key={image.id} className="relative">
                                                <img
                                                    src={`/storage/${image.image_path}`}
                                                    alt={product.title}
                                                    className="w-full h-40 object-cover rounded-lg"
                                                />
                                                {image.is_primary && (
                                                    <div className="absolute top-2 left-2 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs">
                                                        Primary
                                                    </div>
                                                )}
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <p className="text-muted-foreground">No images uploaded</p>
                                )}
                            </CardContent>
                        </Card>
                    </div>
                </div>
            </div>
        </AppLayout>
    );
}
=====================================

=== File: /home/rick110/Downloads/110/BookStore/resources/js/pages/Admin/Products/Index.tsx ===

// resources/js/pages/Admin/Products/Index.tsx
import { Head, Link, router } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { Button } from '@/components/ui/button';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { MoreHorizontal, Pencil, Trash, Plus, Eye } from 'lucide-react';
import { type BreadcrumbItem } from '@/types';

interface Product {
    id: number;
    title: string;
    regular_price: number;
    compare_at_price: number | null;
    stock_quantity: number;
    status: 'active' | 'draft';
    primary_image?: {
        id: number;
        image_path: string;
    };
    categories: {
        id: number;
        name: string;
    }[];
}

interface PaginatedProducts {
    data: Product[];
    current_page: number;
    last_page: number;
    per_page: number;
    total: number;
}

interface Props {
    products: PaginatedProducts;
}

export default function ProductIndex({ products }: Props) {
    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Products', href: '/admin/products' },
    ];

    const handleDelete = (product: Product) => {
        if (confirm(`Are you sure you want to delete "${product.title}"?`)) {
            router.delete(`/admin/products/${product.id}`);
        }
    };

    const formatPrice = (price: number) => {
        return new Intl.NumberFormat('en-KE', {
            style: 'currency',
            currency: 'KES',
        }).format(price);
    };

    const handlePageChange = (page: number) => {
        router.get('/admin/products', { page }, { preserveState: true });
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Products" />
            
            <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                    <div>
                        <h1 className="text-2xl font-semibold">Products</h1>
                        <p className="text-muted-foreground">
                            Manage your book inventory
                        </p>
                    </div>
                    <Link href="/admin/products/create">
                        <Button>
                            <Plus className="mr-2 h-4 w-4" />
                            Add Product
                        </Button>
                    </Link>
                </div>

                <div className="rounded-md border">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead className="w-[100px]">Image</TableHead>
                                <TableHead>Title</TableHead>
                                <TableHead>Categories</TableHead>
                                <TableHead>Price</TableHead>
                                <TableHead>Stock</TableHead>
                                <TableHead>Status</TableHead>
                                <TableHead className="w-[70px]"></TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {products.data.length === 0 ? (
                                <TableRow>
                                    <TableCell colSpan={7} className="text-center">
                                        No products found. Create your first product.
                                    </TableCell>
                                </TableRow>
                            ) : (
                                products.data.map((product) => (
                                    <TableRow key={product.id}>
                                        <TableCell>
                                            {product.primary_image ? (
                                                <img
                                                    src={`/storage/${product.primary_image.image_path}`}
                                                    alt={product.title}
                                                    className="h-16 w-16 object-cover rounded"
                                                />
                                            ) : (
                                                <div className="h-16 w-16 bg-gray-100 rounded flex items-center justify-center">
                                                    <span className="text-gray-400">No image</span>
                                                </div>
                                            )}
                                        </TableCell>
                                        <TableCell className="font-medium">
                                            {product.title}
                                        </TableCell>
                                        <TableCell>
                                            <div className="flex flex-wrap gap-1">
                                                {product.categories.map((category) => (
                                                    <Badge key={category.id} variant="secondary">
                                                        {category.name}
                                                    </Badge>
                                                ))}
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div>
                                                <div>{formatPrice(product.regular_price)}</div>
                                                {product.compare_at_price && (
                                                    <div className="text-sm text-muted-foreground line-through">
                                                        {formatPrice(product.compare_at_price)}
                                                    </div>
                                                )}
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <Badge variant={product.stock_quantity > 0 ? "default" : "destructive"}>
                                                {product.stock_quantity}
                                            </Badge>
                                        </TableCell>
                                        <TableCell>
                                            <Badge variant={product.status === 'active' ? "default" : "secondary"}>
                                                {product.status}
                                            </Badge>
                                        </TableCell>
                                        <TableCell>
                                            <DropdownMenu>
                                                <DropdownMenuTrigger asChild>
                                                    <Button variant="ghost" size="icon">
                                                        <MoreHorizontal className="h-4 w-4" />
                                                    </Button>
                                                </DropdownMenuTrigger>
                                                <DropdownMenuContent align="end">
                                                    <DropdownMenuItem asChild>
                                                        <Link href={`/admin/products/${product.id}`}>
                                                            <Eye className="mr-2 h-4 w-4" />
                                                            View
                                                        </Link>
                                                    </DropdownMenuItem>
                                                    <DropdownMenuItem asChild>
                                                        <Link href={`/admin/products/${product.id}/edit`}>
                                                            <Pencil className="mr-2 h-4 w-4" />
                                                            Edit
                                                        </Link>
                                                    </DropdownMenuItem>
                                                    <DropdownMenuItem
                                                        className="text-destructive"
                                                        onClick={() => handleDelete(product)}
                                                    >
                                                        <Trash className="mr-2 h-4 w-4" />
                                                        Delete
                                                    </DropdownMenuItem>
                                                </DropdownMenuContent>
                                            </DropdownMenu>
                                        </TableCell>
                                    </TableRow>
                                ))
                            )}
                        </TableBody>
                    </Table>
                </div>

                {products.last_page > 1 && (
                    <div className="flex items-center justify-center space-x-2 py-4">
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(products.current_page - 1)}
                            disabled={products.current_page === 1}
                        >
                            Previous
                        </Button>
                        <div className="text-sm text-muted-foreground">
                            Page {products.current_page} of {products.last_page}
                        </div>
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(products.current_page + 1)}
                            disabled={products.current_page === products.last_page}
                        >
                            Next
                        </Button>
                    </div>
                )}
            </div>
        </AppLayout>
    );
}
=====================================

